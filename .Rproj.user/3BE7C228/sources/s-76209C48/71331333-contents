---
title: "Assignment Tips"
---


    
# Course work files & organization

You need to have Git installed on your compute. You can use command line Git or a Git client (such as GitHub Desktop), or even RStudio itself to push, pull, etc. to/from GitHub. 
  
### Set-up your private GitHub repo for course work

![Example of a personal repository directory structure](images/Individual_hw_repo.png)

  * Please use the repository within the organization assigned to you to submit all your course work (i.e., the repo `zz_lastname-firstname_STAT540_2022`). Do not use branches or any other repositories.
  * All your work should be nicely organized in your repository. Your repository needs to include a clear top-level `README.md` that contains links to your work. This is the presentation of your repository and it helps others to find your work and contributions! 
  * Make directories for each assignment type (e.g. `Intro_Assignment`, `Paper_critique`, `Analysis_Assignment`, `Seminars`, `Project`)
    - We truly mean a [directory or "folder"](http://en.wikipedia.org/wiki/Directory_(computing)) -- NOT a [Git branch](http://git-scm.com/book/en/Git-Branching) or anything fancy like that! On your local computer, go to the directory where this Git repository lives. Make the new directories here.
    - These directories may have sub-directories (especially useful for the `Seminars` directory)
  * It is also nice to include a `README.md` inside each of the assignment and seminar directories. 
    - GitHub automatically renders all Markdown files into (pseudo-)HTML when you visit them in a browser. Whenever a *directory* in a repo is visited, if it contains a Markdown file called `README.md`, it will automatically be rendered, effectively serving as a landing or home page.
  * You will also have a team repository for your group project; more information on organizing this repo (with similar principles) can be found on the [Group Project Rubrics Page](group_project_rubrics.html#github-repository-10-pts)


### Main file types

#### R Markdown (source file)

  * **Write your homework in R Markdown.** The file extension should be `.Rmd`.
  * Recommendation: Create a skeleton of your report by starting with the Markdown or R Markdown file that creates the assignment itself! You can take some things away (unnecessary detail) and add others (R chunks) to morph this into your homework solution.
    - You'll have these files if you are using Git(Hub) to keep a current copy of the whole course repository. Or, from the links above, click on "Raw" to get raw Markdown and save to a local file.
    
#### Markdown (output file)

  * **Compile your homework to Markdown (file extension should be `.md`).**
    - In the YAML header, specify `output: github_document`   
    - RStudio's "Knit" button will create the md file when the output is specified in this way. The github .md file is a file that can be rendered nicely on GitHub.   
  * Note that, by default, any figures created are placed into a subdirectory titled `[filename]_files` where `[filename] is the basename (without extension) of your Rmd. The Markdown file links to these and, therefore, requires them to present your full report.
  * __Never ever__ edit the output Markdown "by hand". Only edit the R Markdown source and then regenerate the downstream products from that.

#### Optional HTML file

  * In addition, you may generate an html output file by specifying `output: html_document`. If you do this, also specify `keep_md: true` to keep the markdown file which will be used for grading 
  * Generating an html can also be done by opening the md file generated from the previous step and clicking 'preview' in RStudio.  
    - Alternatively, use `knit2html()` from the `knitr` package in the R Console or in an R script.
    - To run from the shell or in a Makefile, use something like `Rscript -e "knitr::knit2html('hw01_lastname-firstnmae.Rmd')"`
  * __Never ever__ edit the output HTML "by hand". Only edit the R Markdown source and then regenerate the downstream products from that.
  
### General tips on what to commit and what not to commit:

> This is rather specific to STAT 540 and may not necessarily reflect your workflow in the future and in other contexts.

  * Commit the main R markdown (`.Rmd`) file that constitutes your solution. Commit early, commit often!
  * Commit the output Markdown (`.md`) file and the figures stored in the `[filename]_files` subdirectory where `[filename] is the basename (without extension) of your Rmd`.
  * The HTML (`.html`) file is not necessary to commit if you have specified `output: github_document` and commit your md file.
  * Do not commit the input data to your repository.
     - Locally, you should keep the file in some logical place within the homework assignment’s directory. But list the names of such data files in your top-level `.gitignore` file, so that Git ignores it. We do this so that TAs don’t end up with 50 copies of the input data when they mark your work.

# How to "turn in" your work 

When it's time to turn in your deliverable, follow these steps carefully:

1. **Save, Commit, Push**: 
    - Save all the files associated with your solution locally (<font color="red">**R Markdown and Markdown files are both required**</font> for coding assignments).
    - Commit those files to your local Git repository.
    - Push the current state of your local repo to your private repo on GitHub.
2. **Link to the latest commit, open an issue, tag us**: 
  i. Grab the link to the latest commit:
      - Visit your private GitHub repository in a web browser
      - Just above the file list, click on the link to the list of commits in your repo
      - Click on the SHA tag of the relevant commit (7 letters/numbers)
      - Click 'Browse files'
      - Navigate to the folder containing the submitted files
      - Copy the link in the address bar of your browser (this link points to the submitted files at the time of the relevant commit)
  i. Open an issue:
      - Click on "Issues", then on "New Issue"
      - Paste the link from step (i). in the body of the issue
      - Name the issue "Mark *the deliverable title* of *your repository name*", e.g. "Mark seminar 1 of zz_lastname-firstname_STAT540_2022W2"
  i. Tag us:
      - In the description of the issue, tag all TAs with the <font color="red">**`@STAT540-UBC/current_tas`**</font> tag
      - Click "Submit new issue". You're done! Congratulations!

> If you're concerned that something hasn't gone right with the submission, send the TAs an e-mail with your assignment attached. **Note**: this is *only* an emergency back-up plan. We will work with you until you eventually get it submitted via GitHub.




This is for tips on the assignment, but also useful for seminars and any future project you might have. 

### When working on the assignment  

*Start early*. Even if you are already fluent with all the seminars materials, it'd still take time to answer all the questions. 

When you get stuck or when you run into an error, ask yourself these questions: 

- Am I in the right working directory ? 
- Is this material covered in one of the seminars?
- Can I google the information to find how to do this? 
- Is there an R package that can more efficiently do what I'm attempting now? 
- Am I using the right parameters for this function?  (hint, type `?function_name()` where function_name is the name of the function, to check if you're using it right) 

Your Rmarkdown can't be knitted? Is it because you didn't define all the variables inside your Rmarkdown? (your code chunk might run in Rstudio if all the variables are all defined in the Rstudio environment, but it wouldn't run as the Rmarkdown is being knitted if the variables aren't defined in the Rmarkdown document.)

Well-structured dataframes and reusable functions can often lighten your work load. 

Overall presentation and mechanics refer to the fluency, neatness, easiness to read. For example:

- Using headings/subheadings to distinguishes different sections/questions
- Explain what you're doing to show your understanding, ie sandwiching your code and result with some explanations and interpretation. We don't want to see just a graph or some R outputs standing alone in a question. 
- Use inline R code whenever you refers to the value of a variable in a block of text. 
- Hide useless messages or warnings (though make sure the warnings are harmless) using code chunk options. But don't hide any code that generates graphs or are critical steps in your analysis, obviously. 
- Comment on your code so that everyone, including yourself, can easily follow through your steps.
    - In R, comment follows the number sign. For example `# What I did here`  
- There are a few occasions where, instead of just printing an object with R, you could format the info in an nice table. 
    - The `kable()` function from `knitr` package.
    - Also look into the packages `xtable`, `pander` for making pretty HTML tables.

You might find [cheatsheets from Rstudio](https://www.rstudio.com/resources/cheatsheets/) useful, in terms of graphing, making an awesome R markdown, etc.

### Make it easy for people to access your work 

Reduce the friction for TAs and profs to get the hard-working source code and commentary (the R markdown) __and__ the markdown that has all your code and outputs. 

To create the markdown file from Rmarkdown, set the output of the Rmarkdown to "github_document".

```
---
title: "Homework assignment"
author: "Your Name"
output: github_document
---

```
When you submit your homework, knit your Rmarkdown into markdown. Commit and push all of the following:
- The Rmarkdown file
- The markdown file that's created
- The folder that's created. It contains your figures.  


### Make it easy for others to run your code

  * In exactly one, very early R chunk, load any necessary packages, so your dependencies are obvious.
  * In exactly one, very early R chunk, import anything coming from an external file. This will make it easy for someone to see which data files are required, edit to reflect their locals paths if necessary, etc. There are situations where you might not keep data in the repo itself.
  * Pretend you are someone else. Clone a fresh copy of your own repo from GitHub, fire up a new RStudio session and try to knit your R markdown file. Does it "just work"? It should!
  
